"строки в go"

	"устройство строки"
		Строки в go - это обычный массив байт.
		type _string struct {
			elements *byte // underlying bytes
			len      int   // number of bytes
		}

	"Что будет если сложить строки?"
		Ранее мы говорили о том что, строки - это массивы байт. 
		Из этого следует, что при работе со строками (конкатенация и тд) мы будем получать новые строки.

	"Как определить количество символов для строки? Какие есть нюансы при итерации по строке?"
		Исходя из того же знания, что строка это массив байт, взяв базовую функцию len() от строки мы получим количество байт.
		Похожее поведение будет при итерации по строке - итерация по байтам. Тогда как в зависимости от кодировки, символ в строке может занимать не один байт.
		Для того, чтобы работать именно с символами, необходимо преобразовать строку в тип []rune.
		Еще одним способом определения длинны строки является функция RuneCountInString пакета utf8.

		"пример" : 
			func main() {
				str := "世界, 你好!"
				fmt.Printf("len bytes: %d\n", len(str))
				fmt.Printf("len runes: %d\n", len([]rune(str)))
				fmt.Printf("len runes: %d\n", utf8.RuneCountInString(str))
			}
			Output : len bytes: 15
						len runes: 7
						len runes: 7