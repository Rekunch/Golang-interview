"Как реализовано хранилище памяти в Go?"
	Хранилища памяти в Go реализованы с помощью двух подходов:

   хранение в heap и stack. 

	stack в основном используется для хранения локальных переменных, аргументов функции. 
	Из плюсов - stack достаточно легко очищается. 
	Из минусов - при аллокациях на stack существуют копии одних и тех же значений, 
	которые надо хранить и обрабатывать. 
	
	heap в основном используется для хранения глобальный переменных и ссылочных типов. 
	Из плюсов - при аллокациях на heap существует всегда одно уникальное значение, 
	которое надо хранить и обрабатывать. 
	Из минусов - heap тяжело очищается, так как приходится запускать сборщик мусора, 
	который имеет много накладных расходов и останавливает приложение.

"Что обозначает * и &?"
	* указатель
	& адрес памяти

"Как происходит передача параметров в функцию?"
	Параметры в Go всегда передаются по значению. 
	Это значит, что всякий раз, когда мы передаем аргумент в функцию, 
	функция получает копию первоначального значения. 
	Чтобы работать именно с той же самой переменной, не копируя ее, 
	необходимо использовать адрес этой переменной. 
	При этом сам указатель будет скопирован.

"Есть ли особенности поведения при передаче map и slice в функцию?"
	передается копия map или slice. но в этой копии хранится ссылка на исходный массив или мапу.

