Конкурентность в Golang
https://clck.ru/sUEwK

	"Что такое асинхронность?"
		Вычисления в системе могут идти двумя способами:
		синхронно - это когда код выполняется последовательно;
		асинхронно - это когда операцию мы можем выполнять не дожидаясь результата на месте. 
		Обычно подразумевается, что операция может быть выполнена кем-то на стороне.

	"Что такое параллельность?"
		Вычисления будут являться параллельным только в том случае, если они выполняются одновременно. 
		Как пример можно привести процесс ремонта в доме. 
		У нас есть несколько мастеров-универсалов, 
		каждый из которых выполняет работы на своем объекте под ключ. 
		При этом производительность мастеров не зависит друг от друга, 
		так как их работа не пересекается.

	"Что такое thread?"
		Thread - это реализация виртуальных эмуляций физического процессора. 
		Вычисления на разных thread условно можно назвать параллельными.

	"Что такое goroutine?"
		Горутина - реализация в Go корутины, блоков кода, которые работают асинхронно. 
		Она объявляется через оператор go перед функцией, 
		вычисления которой необходимо сделать асинхронными. 
		На многоядерной архитектуре выполнение горутин можно осуществлять на разных ядрах процессора. 
		Это сделает эти вычисления параллельными и может сильно ускорить вычисления.

	"Какие основные отличия горутины от thread?"
		Горутина :
			-Управляются рантаймом языка
			-Более высокоуровневая абстракция, поэтому не зависит от системы
			-Более легковесны
			-Имеет стэк, который может расти
		Поток :
			-Управляются процессорным ядром
			-Зависит от системы
			-Требуют большего количества ресурсов
			-Фиксированный стэк
	
	"Каков минимальный и максимальный вес горутин?"
		для x64 - 1гб
		для х32 - 250мб

	"Что будет если размер горутины превысил допустимый максимум?"
		Если размер стэка горутины превышен (к примеру запустили бесконечную рекурсию), то приложение упадет с fatal error.
	
	"Какое максимальное количество горутин может быть запущено в системе?"
		Количество горутин ограничено только оперативной памятью системы.
	
	"Что такое планировщик go?"
		Рантайм (runtime) — «обслуживающая» часть приложения, которая добавляется к коду приложения. 
		Отвечает за взаимодействие с ОС, планированием выполнения приложения, сборку мусора и за другие поддерживающие операции.
		
		Планировщик — часть рантайма, которая управляет запуском и остановкой горутин, решает, 
		в каком порядке будут выполняться горутины, осуществляет взаимодействие с тредами ОС. 

	"Какие есть способы остановить все горутины в приложении?"
		завершение main функции и main горутины;

   	прослушивание всеми горутинами channel, при закрытии channel отправляется значение по умолчанию всем слушателям, при получении сигнала все горутины делают return;

   	завязать все горутины на переданный в них context.

	"Как наладить связь между горутинами?"
	Каналы  обеспечивают возможность общения нескольких горутин друг с другом, чтобы синхронизировать их выполнение.

	
    Многопоточная работа - работа нескольких потоков. При этом не факт, что все потоки будут активны. 
	 Возможно, что работает один поток, а другой спит. Когда первый поток закончил работу, он может разбудить второй, а сам заснуть

    Распараллеливание - разбиение одной задачи на независимые подзадачи и выполнение этих подзадач одновременно разными потоками. 
	 Пример: вычисление среднего значения двумерного массива. Каждый поток может посчитать сумму своей строки, а потом все это объединить

    Асинхронная работа - когда мы ставим какую-то задачу, но не ждем ответа, а продолжаем делать свою работу. А когда будет готов ответ - нас уведомят. 
	 Пример: попросить секретаря сварить кофе. Мы не ждем этого кофе и занимаемся своими делами, а когда кофе будет готов - нам его принесут.

		


